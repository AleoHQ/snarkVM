WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

number =  @{ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }
positive = _{ number }
negative = @{ "-" ~ number }

// float = @{ integer ~ ("." ~ ASCII_DIGIT*)? }

// An operand is defined as either a register or a value.
operand = _{ boolean | i8 | i16 | i32 | i64 | i128 | u8 | u16 | u32 | u64 | u128 | base | scalar | group | register }
    boolean = { "true" | "false" }
    i8 = @{ (positive | negative) ~ "i8" }
    i16 = @{ (positive | negative) ~ "i16" }
    i32 = @{ (positive | negative) ~ "i32" }
    i64 = @{ (positive | negative) ~ "i64" }
    i128 = @{ (positive | negative) ~ "i128" }
    u8 = @{ positive ~ "u8" }
    u16 = @{ positive ~ "u16" }
    u32 = @{ positive ~ "u32" }
    u64 = @{ positive ~ "u64" }
    u128 = @{ positive ~ "u128" }
    base = @{ positive ~ "base" }
    scalar = @{ positive ~ "scalar" }
    group = @{ positive ~ "group" }
    register = @{ "r" ~ positive }

// An instruction defines an operation to be performed.
instruction = _{ add | add_wrapped }
    add = { "add" ~ register ~ operand ~ operand }
    add_wrapped = { "addw" ~ register ~ operand ~ operand }

// A file is defined as:
//     fn name():
//         instruction_0
//         ...
//         instruction_n
file = { SOI ~ instructions ~ EOI }
    instructions = _{ instruction ~ (NEWLINE ~ instruction)* }
