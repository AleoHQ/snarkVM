
running 2 tests

Initializing 'TestRng' with seed '6521796480127909368'


Initializing 'TestRng' with seed '4527057341387422497'

self.tables: [LookupTable { table: {[507515927779120741094406882556227518083662689003834939583885025390682328121field, 991549685355475038020081383020261143136552486737213967391364437494604160292field]: 4054273567027785679868948904102827169993282255225539787187878205124818312647field} }]
self.tables: [LookupTable { table: {[7203946393756286596578570963809598242965364071137033773414756538087211327150field, 7964177118830786833296213568098048256053878216175983228786289569956968898793field]: 5156781758320790466191619793515307725671081044352092682105122392673940547050field} }]
input: [507515927779120741094406882556227518083662689003834939583885025390682328121field.public, 991549685355475038020081383020261143136552486737213967391364437494604160292field.public, 4054273567027785679868948904102827169993282255225539787187878205124818312647field.public]
input: [7203946393756286596578570963809598242965364071137033773414756538087211327150field.public, 7964177118830786833296213568098048256053878216175983228786289569956968898793field.public, 5156781758320790466191619793515307725671081044352092682105122392673940547050field.public]
Circuit::scope(Constants: 1, Public: 0, Private: 0, Constraints: 0)

Circuit::scope(Constants: 1, Public: 0, Private: 0, Constraints: 0)

test ecdsa::verify::tests::test_verify_public ... ok
test ecdsa::verifier::verify::tests::test_verify_public ... ok

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 78 filtered out; finished in 0.00s


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

